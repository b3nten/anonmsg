// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addPublicKeyToInbox = `-- name: AddPublicKeyToInbox :one
UPDATE inboxes SET public_key = $2 WHERE private_key = $1
returning public_key
`

type AddPublicKeyToInboxParams struct {
	PrivateKey string
	PublicKey  sql.NullString
}

func (q *Queries) AddPublicKeyToInbox(ctx context.Context, arg AddPublicKeyToInboxParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, addPublicKeyToInbox, arg.PrivateKey, arg.PublicKey)
	var public_key sql.NullString
	err := row.Scan(&public_key)
	return public_key, err
}

const createInbox = `-- name: CreateInbox :one
INSERT INTO inboxes (private_key)
VALUES ($1)
RETURNING id, created_at, updated_at, private_key, public_key, active
`

func (q *Queries) CreateInbox(ctx context.Context, privateKey string) (Inbox, error) {
	row := q.db.QueryRowContext(ctx, createInbox, privateKey)
	var i Inbox
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Active,
	)
	return i, err
}

const createPrivateMessage = `-- name: CreatePrivateMessage :one
INSERT INTO messages (inbox_id, msg_content, created_at)
SELECT i.id, $2, NOW()
FROM inboxes i
WHERE i.private_key = $1
AND i.active = true
RETURNING id, created_at
`

type CreatePrivateMessageParams struct {
	PrivateKey string
	MsgContent string
}

type CreatePrivateMessageRow struct {
	ID        int64
	CreatedAt time.Time
}

func (q *Queries) CreatePrivateMessage(ctx context.Context, arg CreatePrivateMessageParams) (CreatePrivateMessageRow, error) {
	row := q.db.QueryRowContext(ctx, createPrivateMessage, arg.PrivateKey, arg.MsgContent)
	var i CreatePrivateMessageRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const createPublicMessage = `-- name: CreatePublicMessage :one
INSERT INTO messages (inbox_id, msg_content, created_at, sent_with_public_key)
SELECT i.id, $2, NOW(), true
FROM inboxes i
WHERE i.public_key = $1
AND i.active = true
AND i.public_key IS NOT NULL
RETURNING id, created_at
`

type CreatePublicMessageParams struct {
	PublicKey  sql.NullString
	MsgContent string
}

type CreatePublicMessageRow struct {
	ID        int64
	CreatedAt time.Time
}

func (q *Queries) CreatePublicMessage(ctx context.Context, arg CreatePublicMessageParams) (CreatePublicMessageRow, error) {
	row := q.db.QueryRowContext(ctx, createPublicMessage, arg.PublicKey, arg.MsgContent)
	var i CreatePublicMessageRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const deleteInbox = `-- name: DeleteInbox :exec
DELETE FROM inboxes WHERE private_key = $1
`

func (q *Queries) DeleteInbox(ctx context.Context, privateKey string) error {
	_, err := q.db.ExecContext(ctx, deleteInbox, privateKey)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE messages.id = $1
  AND inbox_id = (
    SELECT inbox.id
    FROM inboxes inbox
    WHERE inbox.private_key = $2
  )
`

type DeleteMessageParams struct {
	ID         int64
	PrivateKey string
}

func (q *Queries) DeleteMessage(ctx context.Context, arg DeleteMessageParams) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, arg.ID, arg.PrivateKey)
	return err
}

const getInbox = `-- name: GetInbox :one
SELECT
  id,
  created_at,
  updated_at,
  private_key,
  public_key,
  active,
  (SELECT COUNT(*) FROM messages WHERE inbox_id = inboxes.id) AS message_count
FROM inboxes
WHERE private_key = $1
`

type GetInboxRow struct {
	ID           int64
	CreatedAt    time.Time
	UpdatedAt    time.Time
	PrivateKey   string
	PublicKey    sql.NullString
	Active       bool
	MessageCount int64
}

func (q *Queries) GetInbox(ctx context.Context, privateKey string) (GetInboxRow, error) {
	row := q.db.QueryRowContext(ctx, getInbox, privateKey)
	var i GetInboxRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PrivateKey,
		&i.PublicKey,
		&i.Active,
		&i.MessageCount,
	)
	return i, err
}

const getMessagesByPrivateKey = `-- name: GetMessagesByPrivateKey :many
WITH inbox_check AS (
  SELECT id
  FROM inboxes
  WHERE private_key = $1
)
SELECT
  messages.msg_content,
  messages.created_at,
  messages.id
FROM inbox_check
LEFT JOIN messages ON inbox_check.id = messages.inbox_id
`

type GetMessagesByPrivateKeyRow struct {
	MsgContent sql.NullString
	CreatedAt  sql.NullTime
	ID         sql.NullInt64
}

func (q *Queries) GetMessagesByPrivateKey(ctx context.Context, privateKey string) ([]GetMessagesByPrivateKeyRow, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByPrivateKey, privateKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMessagesByPrivateKeyRow
	for rows.Next() {
		var i GetMessagesByPrivateKeyRow
		if err := rows.Scan(&i.MsgContent, &i.CreatedAt, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePublicKeyFromInbox = `-- name: RemovePublicKeyFromInbox :exec
UPDATE inboxes SET public_key = NULL WHERE private_key = $1
`

func (q *Queries) RemovePublicKeyFromInbox(ctx context.Context, privateKey string) error {
	_, err := q.db.ExecContext(ctx, removePublicKeyFromInbox, privateKey)
	return err
}

const setInboxActive = `-- name: SetInboxActive :one
UPDATE inboxes SET active = $2 WHERE private_key = $1
returning active
`

type SetInboxActiveParams struct {
	PrivateKey string
	Active     bool
}

func (q *Queries) SetInboxActive(ctx context.Context, arg SetInboxActiveParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, setInboxActive, arg.PrivateKey, arg.Active)
	var active bool
	err := row.Scan(&active)
	return active, err
}
